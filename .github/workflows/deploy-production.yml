name: Deploy n8n to Production

on:
  push:
    branches:
      - production
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: false
        type: boolean

env:
  NODE_OPTIONS: '--max-old-space-size=6144'
  N8N_VERSION: ${{ github.sha }}

jobs:
  deploy:
    name: Deploy n8n to Production
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: production
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build:n8n

      - name: Build Docker image
        run: |
          echo "🐳 Building Docker image for production deployment"
          docker build -t n8n-self-deploy:production \
            -f docker/images/n8n/Dockerfile \
            --build-arg NODE_VERSION=22 \
            --build-arg N8N_VERSION=${{ env.N8N_VERSION }} \
            --build-arg N8N_RELEASE_TYPE=production \
            .
          
          # Tag for Docker Hub
          docker tag n8n-self-deploy:production ${{ secrets.DOCKER_USERNAME }}/n8n-self-deploy:production
          docker tag n8n-self-deploy:production ${{ secrets.DOCKER_USERNAME }}/n8n-self-deploy:latest

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: |
          echo "📤 Pushing Docker image to Docker Hub"
          docker push ${{ secrets.DOCKER_USERNAME }}/n8n-self-deploy:production
          docker push ${{ secrets.DOCKER_USERNAME }}/n8n-self-deploy:latest
          echo "✅ Successfully pushed to Docker Hub"

      - name: Deploy to AWS Ubuntu Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_SERVER_HOST }}
          username: ${{ secrets.AWS_SERVER_USER }}
          key: ${{ secrets.AWS_SERVER_SSH_KEY }}
          port: ${{ secrets.AWS_SERVER_PORT || 22 }}
          script: |
            echo "🚀 Starting deployment on AWS Ubuntu server"
            
            # Create deployment directory
            mkdir -p /home/${{ secrets.AWS_SERVER_USER }}/n8n-deployment
            cd /home/${{ secrets.AWS_SERVER_USER }}/n8n-deployment
            
            # Stop existing containers
            echo "🛑 Stopping existing production containers"
            docker-compose -f docker-compose.production.yml down || true
            
            # Remove old images to free space
            echo "🧹 Cleaning up old Docker images"
            docker image prune -f || true
            
            # Pull latest image from Docker Hub
            echo "📥 Pulling latest image from Docker Hub"
            docker pull ${{ secrets.DOCKER_USERNAME }}/n8n-self-deploy:production
            
            # Create production docker-compose file
            echo "📝 Creating production docker-compose.production.yml"
            cat > docker-compose.production.yml << 'DOCKER_COMPOSE_EOF'
            version: '3.8'
            services:
              n8n:
                image: ${{ secrets.DOCKER_USERNAME }}/n8n-self-deploy:production
                container_name: n8n-production
                restart: unless-stopped
                ports:
                  - "5679:5678"  # Changed to port 5679 to avoid conflict
                environment:
                  - N8N_BASIC_AUTH_ACTIVE=true
                  - N8N_BASIC_AUTH_USER=admin
                  - N8N_BASIC_AUTH_PASSWORD=changeme
                  - N8N_HOST=0.0.0.0
                  - N8N_PORT=5678
                  - N8N_PROTOCOL=http
                  - WEBHOOK_URL=http://${{ secrets.AWS_SERVER_HOST }}:5679/  # Updated URL
                  - GENERIC_TIMEZONE=UTC
                  - DB_TYPE=postgresdb
                  - DB_POSTGRESDB_HOST=postgres
                  - DB_POSTGRESDB_PORT=5432
                  - DB_POSTGRESDB_DATABASE=n8n_production  # Unique database name
                  - DB_POSTGRESDB_USER=n8n_production
                  - DB_POSTGRESDB_PASSWORD=n8n_production_password
                volumes:
                  - n8n_production_data:/home/node/.n8n  # Unique volume name
                networks:
                  - n8n_production_network  # Unique network name
                depends_on:
                  - postgres
                
              postgres:
                image: postgres:16
                container_name: n8n-postgres-production
                restart: unless-stopped
                environment:
                  - POSTGRES_DB=n8n_production  # Unique database name
                  - POSTGRES_USER=n8n_production
                  - POSTGRES_PASSWORD=n8n_production_password
                volumes:
                  - postgres_production_data:/var/lib/postgresql/data  # Unique volume name
                networks:
                  - n8n_production_network  # Unique network name
                ports:
                  - "5433:5432"  # Changed to port 5433 to avoid conflict

            volumes:
              n8n_production_data:  # Unique volume name
              postgres_production_data:  # Unique volume name

            networks:
              n8n_production_network:  # Unique network name
                driver: bridge
            DOCKER_COMPOSE_EOF
            
            # Start the services using the production compose file
            echo "🚀 Starting n8n production services"
            docker-compose -f docker-compose.production.yml up -d
            
            # Wait for services to be ready
            echo "⏳ Waiting for services to start..."
            sleep 30
            
            # Check if services are running
            echo "🔍 Checking service status"
            docker-compose ps
            
            # Test n8n health
            echo "🏥 Testing n8n production health"
            curl -f http://localhost:5679/healthz || echo "Health check failed, but continuing..."
            
            echo "✅ Production deployment completed successfully!"
            echo "🌐 n8n production is available at: http://${{ secrets.AWS_SERVER_HOST }}:5679"
            echo "👤 Default credentials: admin / changeme"

      - name: Health Check
        run: |
          echo "✅ Production deployment completed!"
          echo " Deployment Summary:"
          echo "   - Image: ${{ secrets.DOCKER_USERNAME }}/n8n-self-deploy:production"
          echo "   - Version: ${{ env.N8N_VERSION }}"
          echo "   - Commit: ${{ github.sha }}"
          echo "   - Server: ${{ secrets.AWS_SERVER_HOST }}"
          echo "   - Timestamp: $(date -u)"
          echo ""
          echo " Access Information:"
          echo "   - URL: http://${{ secrets.AWS_SERVER_HOST }}:5678"
          echo "   - Username: admin"
          echo "   - Password: changeme"

      - name: Create local docker-compose reference
        run: |
          echo "📝 Creating local docker-compose reference file"
          cat > docker-compose.production.yml << 'DOCKER_COMPOSE_EOF'
          version: '3.8'
          services:
            n8n:
              image: ${{ secrets.DOCKER_USERNAME }}/n8n-self-deploy:production
              container_name: n8n-production
              restart: unless-stopped
              ports:
                - "5678:5678"
              environment:
                - N8N_BASIC_AUTH_ACTIVE=true
                - N8N_BASIC_AUTH_USER=admin
                - N8N_BASIC_AUTH_PASSWORD=changeme
                - N8N_HOST=0.0.0.0
                - N8N_PORT=5678
                - N8N_PROTOCOL=http
                - WEBHOOK_URL=http://${{ secrets.AWS_SERVER_HOST }}:5678/
                - GENERIC_TIMEZONE=UTC
                - DB_TYPE=postgresdb
                - DB_POSTGRESDB_HOST=postgres
                - DB_POSTGRESDB_PORT=5432
                - DB_POSTGRESDB_DATABASE=n8n
                - DB_POSTGRESDB_USER=n8n
                - DB_POSTGRESDB_PASSWORD=n8n_password
              volumes:
                - n8n_data:/home/node/.n8n
              networks:
                - n8n-network
              depends_on:
                - postgres
              
            postgres:
              image: postgres:16
              container_name: n8n-postgres-production
              restart: unless-stopped
              environment:
                - POSTGRES_DB=n8n
                - POSTGRES_USER=n8n
                - POSTGRES_PASSWORD=n8n_password
              volumes:
                - postgres_data:/var/lib/postgresql/data
              networks:
                - n8n-network
              ports:
                - "5432:5432"

          volumes:
            n8n_data:
            postgres_data:

          networks:
            n8n-network:
              driver: bridge
          DOCKER_COMPOSE_EOF

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-deployment-${{ env.N8N_VERSION }}
          path: |
            docker-compose.production.yml
          retention-days: 30
